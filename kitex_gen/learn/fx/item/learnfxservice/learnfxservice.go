// Code generated by Kitex v0.4.2. DO NOT EDIT.

package learnfxservice

import (
	"context"
	item "github.com/ag9920/learnfx/kitex_gen/learn/fx/item"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return learnFxServiceServiceInfo
}

var learnFxServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "LearnFxService"
	handlerType := (*item.LearnFxService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateItem":         kitex.NewMethodInfo(createItemHandler, newLearnFxServiceCreateItemArgs, newLearnFxServiceCreateItemResult, false),
		"FilterVisibleItems": kitex.NewMethodInfo(filterVisibleItemsHandler, newLearnFxServiceFilterVisibleItemsArgs, newLearnFxServiceFilterVisibleItemsResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "item",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.2",
		Extra:           extra,
	}
	return svcInfo
}

func createItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*item.LearnFxServiceCreateItemArgs)
	realResult := result.(*item.LearnFxServiceCreateItemResult)
	success, err := handler.(item.LearnFxService).CreateItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLearnFxServiceCreateItemArgs() interface{} {
	return item.NewLearnFxServiceCreateItemArgs()
}

func newLearnFxServiceCreateItemResult() interface{} {
	return item.NewLearnFxServiceCreateItemResult()
}

func filterVisibleItemsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*item.LearnFxServiceFilterVisibleItemsArgs)
	realResult := result.(*item.LearnFxServiceFilterVisibleItemsResult)
	success, err := handler.(item.LearnFxService).FilterVisibleItems(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLearnFxServiceFilterVisibleItemsArgs() interface{} {
	return item.NewLearnFxServiceFilterVisibleItemsArgs()
}

func newLearnFxServiceFilterVisibleItemsResult() interface{} {
	return item.NewLearnFxServiceFilterVisibleItemsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateItem(ctx context.Context, req *item.CreateItemReq) (r *item.CreateItemResp, err error) {
	var _args item.LearnFxServiceCreateItemArgs
	_args.Req = req
	var _result item.LearnFxServiceCreateItemResult
	if err = p.c.Call(ctx, "CreateItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FilterVisibleItems(ctx context.Context, req *item.FilterVisibleItemsReq) (r *item.FilterVisibleItemsResp, err error) {
	var _args item.LearnFxServiceFilterVisibleItemsArgs
	_args.Req = req
	var _result item.LearnFxServiceFilterVisibleItemsResult
	if err = p.c.Call(ctx, "FilterVisibleItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
